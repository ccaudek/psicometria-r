# Outlier {#sec-eda-outlier}

::: callout-note
## In questo capitolo imparerai a

- comprendere il ruolo e gli effetti degli outlier;
- individuare outlier con metodi univariati e multivariati;
- utilizzare il pacchetto {performance} in R per rilevarli;
- documentare e rendere riproducibili le procedure;
- considerare alternative (es. winsorizzazione) e preregistrare le scelte.
:::

::: callout-tip
## Prerequisiti

- Leggere "Check your outliers! An introduction to identifying statistical outliers in R with easystats" [@theriault2024check].
:::

::: callout-important
## Preparazione del Notebook

```{r}
here::here("code", "_common.R") |> 
  source()

# Load packages
if (!requireNamespace("pacman")) install.packages("pacman")
pacman::p_load(performance, see, datawizard, MASS)
```
:::

## Introduzione

Quando analizziamo dati reali, ci imbattiamo spesso in osservazioni che sembrano molto diverse dalla maggior parte delle altre. Questi valori anomali, chiamati outlier, possono avere origini diverse. Ad esempio, potrebbero derivare da errori di misura o inserimento dati, oppure essere casi estremi ma comunque validi.

Identificare e trattare gli outlier in modo appropriato è importante per evitare che distorcano i risultati dell'analisi. Tuttavia, non esiste una definizione universale di outlier: dipende dal contesto e dall'obiettivo dell'analisi.

In questo capitolo, esploreremo diversi metodi per individuare gli outlier, concentrandoci su tecniche robuste che minimizzano l'influenza di questi valori anomali sulle statistiche descrittive [@simmons2011false].

## Come Identificare gli Outlier

### Un primo metodo: i boxplot
  
  Uno strumento semplice e intuitivo per individuare gli outlier è il *boxplot*. Il boxplot riassume la distribuzione di una variabile mostrando la mediana, il primo e il terzo quartile (Q1 e Q3) e due estremi, detti "whiskers". I punti al di fuori di questi whiskers sono considerati potenziali outlier.

Esempio in R:

```{r}
data <- data.frame(
  value = c(rnorm(100, mean = 10, sd = 2), 30)
  ) # Aggiungiamo un outlier

ggplot(data, aes(y = value)) +
  geom_boxplot() +
  coord_flip()
```

Se il boxplot mostra un punto isolato lontano dagli altri dati, potrebbe essere un outlier.

### Metodi basati sulla variabilità

#### Intervallo interquartile (IQR)

John Tukey ha introdotto una definizione operativa di outlier basata sull'*Interquartile Range* (IQR), ovvero la differenza tra il terzo e il primo quartile:

- I valori inferiori a $Q1 - 1.5 \times IQR$ o superiori a $Q3 + 1.5 \times IQR$ sono considerati outlier moderati.
- I valori oltre $Q1 - 3 \times IQR$ o $Q3 + 3 \times IQR$ sono definiti *far out* outliers.

Esempio in R:

```{r}
Q1 <- quantile(data$value, 0.25)
Q3 <- quantile(data$value, 0.75)
IQR_value <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value

outliers <- data$value[data$value < lower_bound | data$value > upper_bound]
outliers
```

Questo metodo è efficace per distribuzioni simmetriche, ma potrebbe non funzionare bene con dati asimmetrici.


#### Median Absolute Deviation (MAD)

Un metodo più robusto rispetto all'IQR è il *Median Absolute Deviation* (MAD), che utilizza la mediana anziché la media per stimare la dispersione:
  
```{r}
mad_value <- mad(data$value)
threshold <- 3 * mad_value # Soglia classica per gli outlier

outliers_mad <- data$value[abs(data$value - median(data$value)) > threshold]
outliers_mad
```

Il MAD è meno sensibile agli outlier rispetto alla deviazione standard ed è spesso preferito per dati con distribuzioni non normali.

## Outlier Multivariati

Quando si considerano più variabili contemporaneamente, un valore potrebbe non apparire anomalo su una singola variabile, ma esserlo nel contesto dell'intero dataset. Un metodo comune per individuare questi outlier è la *Distanza di Mahalanobis*, che tiene conto delle correlazioni tra variabili.

Per comprendere intuitivamente la distanza di Mahalanobis, immaginate di avere una nube di punti che rappresentano individui, ciascuno con i propri valori di altezza e peso. Il “centro” di questa nube è un punto ideale che rappresenta una sorta di media multivariata (tenendo conto sia dell’altezza sia del peso). La distanza di Mahalanobis misura quanto ogni singolo individuo si allontana da questo centro, considerando la variabilità congiunta delle variabili (ad esempio, la correlazione tra altezza e peso). Se un individuo presenta caratteristiche molto diverse rispetto alla maggioranza, la sua distanza di Mahalanobis sarà elevata, segnalando un potenziale outlier.

::: {#fig-maha-dist}
![](../../figures/outliers.png){width="70%"}

Soglie per la detezione degli outliers nel caso di una metrica unidimensionale (pannello di sinistra) e nel caso di una rappresentazione multivariata della varianza (pannello di destra) -- figura creata da Sergen Cansiz.
:::

Esempio in R:

```{r}
X <- as.matrix(mtcars[, c("mpg", "hp")])
center <- colMeans(X)
cov_matrix <- cov(X)
mahal_dist <- mahalanobis(X, center, cov_matrix)

threshold <- qchisq(0.975, df = ncol(X)) # Soglia al 97.5%
outliers_mahal <- X[mahal_dist > threshold, ]
outliers_mahal
```

Questo metodo è utile per dataset con più variabili correlate, come misure biometriche (altezza e peso).


Tuttavia, la versione classica di questa misura non è particolarmente robusta: la presenza stessa di outlier può distorcere il calcolo del “centro” e della variabilità complessiva, rendendo meno affidabile l’individuazione di altri valori anomali. Per questo motivo, si preferisce utilizzare una variante più resistente, la Minimum Covariance Determinant (MCD), che diminuisce l’influenza degli outlier stessi nel processo di identificazione.

All’interno del pacchetto {performance} in R, è possibile applicare questa variante robusta utilizzando la funzione `check_outliers()` con l’argomento `method = "mcd"`. In questo modo, è possibile individuare gli outlier multivariati in maniera più solida e coerente, anche quando si lavora con dati fortemente influenzati da valori estremi.

```{r}
d <- mtcars[, c("mpg", "hp")]
outliers <- performance::check_outliers(d, method = "mcd", verbose = FALSE)
outliers
```

Si possono poi visualizzare questi outlier:

```{r}
plot(outliers)
```

Sono disponibili anche altre varianti multivariate documentate nella help page della funzione.


## Cosa Fare con gli Outlier?

Una volta identificati gli outlier, dobbiamo decidere se rimuoverli, correggerli o mantenerli [@leys2019classify]. Alcuni approcci comuni includono:

1. **Verificare la fonte del dato**: un errore di inserimento può essere corretto.
2. **Rimuovere gli outlier estremi**: utile se il valore è chiaramente un errore di misura.
3. **Usare metodi robusti**: strumenti come la mediana o il MAD sono meno influenzati dagli outlier.
4. **Trasformare i dati**: applicare logaritmi o altre trasformazioni può ridurre l'impatto degli outlier.
5. **Winsorizzazione**: invece di rimuovere gli outlier, possiamo limitarli a un massimo accettabile.

Nel pacchetto easystats, la funzione `winsorize()` di *{datawizard}* semplifica il compito di Winsorizzazione:
  
```r
winsorized_data <- 
  winsorize(data$value, method = "zscore", robust = TRUE, threshold = 3)
```

## Importanza della Trasparenza

Qualunque decisione va documentata chiaramente: quanti outlier sono stati individuati, con quale metodo, a quale threshold, come sono stati gestiti, e preferibilmente con il codice R utilizzato. La preregistrazione e la condivisione dei dati e del codice (ad es. su OSF) sono pratiche consigliate per garantire riproducibilità e trasparenza.

## Riflessioni Conclusive

Abbiamo mostrato come identificare gli outlier in modo coerente e trasparente, allineandoci alle buone pratiche correnti. Tuttavia, la buona pratica non si limita alla scelta degli algoritmi: è fondamentale anche preregistrare le decisioni, essere coerenti, trasparenti e fornire giustificazioni. 

## Esercizi

::: {.callout-important title="Problemi 1" collapse="true"}
**Domande teoriche**

1. Cos'è un outlier?
2. Perché è importante identificare e trattare correttamente gli outlier?
3. Descrivi brevemente il metodo del boxplot per identificare gli outlier.
4. Cosa si intende per Interquartile Range (IQR) e come viene utilizzato per individuare gli outlier?
5. Qual è la differenza tra il metodo IQR e il Median Absolute Deviation (MAD) per l'identificazione degli outlier?
6. Cos'è la distanza di Mahalanobis e in che modo può aiutare nell'identificazione degli outlier multivariati?
7. Perché la distanza di Mahalanobis classica potrebbe non essere robusta? Come si può migliorare l'approccio?
8. Quali sono le opzioni per gestire gli outlier una volta identificati?
9. Cos'è la Winsorizzazione e in quali casi potrebbe essere utile?
10. Perché è importante la trasparenza nelle decisioni riguardanti gli outlier?
:::

::: {.callout-tip title="Soluzioni 1" collapse="true"}
1. **Cos'è un outlier?**

   - Un outlier è un'osservazione che si discosta significativamente dalla maggior parte delle altre osservazioni in un insieme di dati. Può essere dovuto ad errori di misura, errori di inserimento dati o a casi estremi ma validi.

2. **Perché è importante identificare e trattare correttamente gli outlier?**

   - Gli outlier possono distorcere i risultati dell'analisi statistica, portando a conclusioni errate. Identificarli e trattarli correttamente aiuta a ridurre l'effetto di questi valori anomali sulle statistiche descrittive e sulle inferenze statistiche.

3. **Descrivi brevemente il metodo del boxplot per identificare gli outlier.**

   - Il boxplot visualizza la distribuzione di una variabile, mostrando la mediana, il primo e il terzo quartile, e due estremi ("whiskers"). I punti al di fuori di questi whiskers sono considerati potenziali outlier.

4. **Cosa si intende per Interquartile Range (IQR) e come viene utilizzato per individuare gli outlier?**

   - L'IQR è la differenza tra il terzo e il primo quartile di un insieme di dati. Valori inferiori a $Q1 - 1.5 \times IQR$ o superiori a $Q3 + 1.5 \times IQR$ sono considerati outlier moderati. Valori oltre $Q1 - 3 \times IQR$ o $Q3 + 3 \times IQR$ sono definiti "far out" outliers.

5. **Qual è la differenza tra il metodo IQR e il Median Absolute Deviation (MAD) per l'identificazione degli outlier?**

   - Il metodo IQR si basa sulla differenza tra il terzo e il primo quartile, mentre il MAD utilizza la mediana delle deviazioni assolute dalla mediana per stimare la dispersione. Il MAD è meno sensibile agli outlier rispetto all'IQR e alla deviazione standard, rendendolo preferibile per dati con distribuzioni non normali.

6. **Cos'è la distanza di Mahalanobis e in che modo può aiutare nell'identificazione degli outlier multivariati?**

   - La distanza di Mahalanobis misura quanto un punto si discosta dal centro della distribuzione di un set di dati multivariato, tenendo conto della correlazione tra le variabili. Valori con distanze di Mahalanobis elevate sono potenziali outlier multivariati.

7. **Perché la distanza di Mahalanobis classica potrebbe non essere robusta? Come si può migliorare l'approccio?**

   - La distanza di Mahalanobis classica può essere distorta dalla presenza di outlier, che influenzano il calcolo del centro e della variabilità complessiva. Un approccio più robusto è la Minimum Covariance Determinant (MCD), che riduce l'influenza degli outlier nel processo di identificazione.

8. **Quali sono le opzioni per gestire gli outlier una volta identificati?**

   - Le opzioni includono: verificare la fonte del dato per possibili errori, rimuovere gli outlier estremi, usare metodi robusti come la mediana o il MAD, trasformare i dati (ad esempio, logaritmi), e limitare gli outlier attraverso la Winsorizzazione.

9. **Cos'è la Winsorizzazione e in quali casi potrebbe essere utile?**

   - La Winsorizzazione è una tecnica che consiste nel sostituire gli outlier estremi con il valore massimo o minimo accettabile. È utile quando si vuole mantenere la dimensione del dataset e ridurre l'impatto degli outlier senza rimuoverli completamente.

10. **Perché è importante la trasparenza nelle decisioni riguardanti gli outlier?**

  - La trasparenza aiuta a garantire la riproducibilità e la validità dell'analisi. Documentare le decisioni, inclusi i metodi e i threshold utilizzati, consente ad altri di capire e valutare l'impatto di queste decisioni sui risultati dell'analisi.
:::

::: {.callout-important title="Problemi 2" collapse="true"}
**Esercizio: Gestione degli Outlier nella Scala di Soddisfazione di Vita (SWLS)**

**Scopo:**  
Imparare a individuare e correggere gli outlier in un dataset che misura la soddisfazione di vita (SWLS). L’esercizio prevede l’inserimento artificiale di due outlier (uno molto alto e uno molto basso) nei dati raccolti, per poi gestirli con i metodi discussi nel capitolo. Infine, bisognerà consegnare:

1. Un file `.qmd` (Quarto) con tutto il codice e i commenti delle operazioni svolte.  
2. Un file CSV finale con i dati “puliti” (ossia senza i due outlier anomali) o con i valori modificati mediante il metodo scelto (winsorizzazione, rimozione, correzione, ecc.).

**Fasi e Istruzioni**

1. **Scarica o carica il dataset SWLS**  
   - Nominare il dataset originale, ad esempio *SWLS_raw.csv*, contenente i punteggi dei partecipanti sulla Scala di Soddisfazione di Vita (SWLS).  
   - Assicurati di avere nel dataset almeno le colonne:  
     - `id` (identificatore univoco del partecipante)  
     - `swls_score` (punteggio totale alla scala SWLS)

2. **Crea due outlier artificiali**  
   - Scegli **un partecipante** al quale assegnare un valore estremamente **basso** di `swls_score` (es. -999) e **un altro partecipante** con un valore estremamente **alto** (es. 999).  
   - Spiega brevemente nel `.qmd` dove e come hai inserito questi valori.  

3. **Analizza i dati alla ricerca di outlier**  
   - Visualizza la distribuzione tramite un boxplot e/o un istogramma.  
   - Calcola i valori soglia utilizzando **almeno uno** dei metodi visti:  
     - IQR (intervallo interquartile)  
     - MAD (Median Absolute Deviation)  
   - Mostra quali osservazioni vengono segnalate come potenziali outlier.  

4. **Decidi come gestire gli outlier**  
   - Scegli se rimuoverli, winsorizzarli o correggerli.  
   - Giustifica la tua scelta: spiega perché quel metodo è appropriato per questi dati o perché preferisci un approccio rispetto a un altro.

5. **Genera i dati “puliti”**  
   - Applica il metodo selezionato.  
   - Salva il dataset risultante (senza i valori anomali o con i valori modificati) in un file CSV chiamato *SWLS_clean.csv*.  

6. **Documenta tutto in un file `.qmd`**  
   - Includi codice R, commenti e brevi spiegazioni testuali dei vari passaggi.  
   - Mostra i risultati rilevanti (boxplot, calcolo dei soglie IQR/MAD, elenco degli outlier individuati, ecc.).  
   - Assicurati di eseguire il rendering del `.qmd` in modo che l’istruttore possa vedere sia l’output che il codice.

7. **Consegnare i file**  
   - **File .qmd**: deve contenere tutto il codice e i passaggi effettuati (inclusi grafici, calcoli e spiegazioni).  
   - **File CSV “pulito”** (*SWLS_clean.csv*): con i dati finali dopo il trattamento degli outlier.

**Suggerimenti**

- **Struttura** il tuo `.qmd` in sezioni (ad es. *Caricamento dati*, *Creazione outlier artificiali*, *Identificazione outlier*, *Gestione outlier*, *Salvataggio dati puliti*).  
- **Motiva** sempre le scelte, soprattutto se rimuovi o modifichi i dati originali: spiega perché il valore appare come un errore di misura o un valore estremo.  
- **Fai controlli incrociati**: potresti usare più di un metodo (boxplot, IQR, MAD) per vedere se l’outlier viene segnalato in tutti i casi.  
- **Documenta** la tua strategia di trasparenza nell’analisi: note sull’eventuale preregistrazione di come avresti gestito gli outlier o su come hai deciso i threshold.
:::

## Informazioni sull'Ambiente di Sviluppo {.unnumbered}

```{r}
sessionInfo()
```

## Bibliografia {.unnumbered}

