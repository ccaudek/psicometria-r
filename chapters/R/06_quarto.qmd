---
execute:
  freeze: auto
---

# Quarto {#sec-quarto}

**Prerequisiti**

- Leggere [An Introduction to R](https://intro2r.com/).
- Leggere [R for Data Science (2e)](https://r4ds.hadley.nz/).

**Concetti e competenze chiave**

**Preparazione del Notebook**

```{r}
here::here("code", "_common.R") |> source()

# Load packages
if (!requireNamespace("pacman")) install.packages("pacman")
pacman::p_load(tidyr)
```

## Introduzione

**Quarto** si inserisce nella tradizione del *literate programming*, un approccio introdotto da Donald Knuth negli anni ’80. Il *literate programming* nasce con l’idea di combinare codice e testo descrittivo in un unico documento, rendendo il programma non solo eseguibile ma anche leggibile e comprensibile agli esseri umani. Questo approccio mira a superare la separazione tra codice e documentazione, permettendo di spiegare non solo *come* un programma funziona, ma anche *perché* è stato scritto in un certo modo.

Questa filosofia è particolarmente rilevante nella scienza dei dati e nell’analisi statistica, dove la riproducibilità e la trasparenza sono fondamentali. In questo contesto, strumenti come Quarto giocano un ruolo chiave, permettendo di integrare codice, risultati e narrazione in un unico documento. Con Quarto, è possibile produrre report, articoli, presentazioni e altri output in diversi formati (HTML, PDF, Word, ecc.), combinando testi interpretativi, risultati numerici e grafici.

Quarto si distingue per la sua flessibilità e per il supporto a diversi linguaggi di programmazione, tra cui R, Python e Julia. Questo strumento può essere utilizzato in tre modi principali:

1. **Presentare conclusioni**: condividere i risultati senza esporre il codice sottostante.
2. **Documentare il processo analitico**: includere sia il codice che i risultati per garantire trasparenza e riproducibilità.
3. **Annotare l’analisi**: integrare interpretazioni e decisioni prese durante il lavoro analitico.

Pur non essendo un pacchetto R, Quarto è uno strumento CLI (*Command Line Interface*). Tuttavia, grazie a RStudio, l’installazione e l’utilizzo di Quarto sono gestiti automaticamente, rendendolo accessibile anche a chi ha meno familiarità con il terminale. 

Quarto rappresenta quindi una naturale evoluzione del concetto di *literate programming*, combinando praticità e rigore scientifico in un unico ambiente di lavoro.

### Creare un documento Quarto

Un file Quarto ha estensione `.qmd` e segue questa struttura:

![](../../figures/quarto_screenshot.png)

Questo file include: 

1. Un'intestazione YAML (metadati del documento).
2. Blocchi di codice delimitati da ```.
3. Testo scritto in Markdown con formattazioni semplici come titoli (`# Titolo`), corsivi (`*testo*`), ecc.


### Editor visivo e sorgente

- **Editor visivo**: simile a Google Docs, offre un'interfaccia WYSIWYM (What You See Is What You Mean). Consente di inserire facilmente immagini, tabelle, citazioni e altro.
- **Editor sorgente**: consente un controllo diretto sul Markdown, utile per debug e personalizzazioni avanzate.

### Blocchi di codice

I blocchi di codice (chiamati "chunks") eseguono codice e visualizzano i risultati. Ogni chunk è delimitato da ``` e può includere opzioni specifiche:

```r
#| label: esempio
#| echo: false
1 + 1
```

Le opzioni più comuni includono:

- `echo: false` (nasconde il codice nel report),
- `eval: false` (non esegue il codice),
- `message: false` e `warning: false` (nasconde messaggi o avvisi).

### Figure

Le figure possono essere generate tramite codice (es. `ggplot()`) o inserite come file esterni. Le opzioni più comuni per il controllo delle dimensioni sono:

- `fig-width` e `fig-height` (dimensioni della figura in pollici),
- `out-width` (percentuale di larghezza del documento),
- `fig-asp` (rapporto d’aspetto, es. 0.618 per il rapporto aureo).

Esempio:

```r
#| fig-width: 6
ggplot(data, aes(x, y)) + geom_point()
```

### Tabelle

Le tabelle possono essere stampate direttamente o personalizzate con funzioni come `knitr::kable()` o pacchetti come `gt`:

```{r}
knitr::kable(head(mtcars))
```

### Caching

Per velocizzare i documenti con calcoli complessi, Quarto supporta la memorizzazione dei risultati:

- `cache: true` salva i risultati di un chunk, evitando di ricalcolarli se il codice non cambia.
- `dependson` specifica dipendenze tra chunk.

### Citazioni e bibliografie in Quarto

Quarto supporta la generazione automatica di citazioni e bibliografie in formati personalizzati, come lo stile APA. Per includere riferimenti, è necessario creare un file `.bib` (ad esempio, `references.bib`) che contenga le citazioni in formato BibTeX. Puoi ottenere queste citazioni direttamente da Google Scholar o altri database accademici. Ecco un esempio:

```bibtex
@article{ceccarini2024age,
  title={Age-dependent changes in the anger superiority effect: Evidence from a visual search task},
  author={Ceccarini, Francesco and Colpizzi, Ilaria and Caudek, Corrado},
  journal={Psychonomic Bulletin \& Review},
  pages={1--10},
  year={2024},
  publisher={Springer}
}
```

#### Configurazione del file YAML

Nel file `.qmd`, aggiungi le seguenti righe all’intestazione YAML per collegare il file `references.bib` e configurare lo stile bibliografico:

```yaml
bibliography: references.bib
biblio-style: apalike
csl: apa.csl
```

- **`bibliography`**: specifica il percorso del file `.bib` (in questo esempio si assume che si trovi nella stessa cartella del file Quarto).
- **`biblio-style`**: imposta lo stile delle citazioni (ad esempio, `apalike` per uno stile simile all'APA).
- **`csl`**: permette di utilizzare uno stile di citazione personalizzato (es., `apa.csl`), che puoi scaricare facilmente da siti come [Zotero Style Repository](https://www.zotero.org/styles).

#### Citazioni Inline

All'interno di un documento `.qmd`, le citazioni vengono aggiunte utilizzando il simbolo `@` seguito dall'identificativo della citazione specificato nel file `.bib`. Ad esempio:

```markdown
... come evidenziato da @ceccarini2024age, si osserva che...
```

Quarto genera automaticamente la bibliografia, includendo solo i riferimenti effettivamente citati nel documento. La bibliografia viene aggiunta alla fine del file renderizzato (ad esempio, in formato HTML o PDF). 

Ad esempio, nel caso di un documento `.qmd`, il testo sopra sarà visualizzato così:

> ... come evidenziato da @ceccarini2024age, si osserva che...

La citazione completa sarà inclusa automaticamente nella bibliografia, posizionata alla fine della pagina web o del documento finale.[^1]

[^1]: Si noti la citazione @ceccarini2024age nella bibliografia della presente pagina web.

## Riflessioni Conclusive

Quarto è uno strumento potente per la creazione di documenti riproducibili e ben strutturati, integrando codice, risultati e testo descrittivo in un unico file. Questa introduzione dovrebbe essere sufficiente per iniziare a lavorare con Quarto, ma c’è ancora molto da imparare. Il modo migliore per rimanere aggiornati è consultare il sito ufficiale di Quarto: [https://quarto.org](https://quarto.org).

Un argomento importante che non abbiamo trattato qui riguarda i dettagli di come comunicare in modo accurato le proprie idee agli altri. Per migliorare le proprie capacità di scrittura, @wickham2023r consigliano due libri: *Style: Lessons in Clarity and Grace* di Joseph M. Williams & Joseph Bizup, e *The Sense of Structure: Writing from the Reader’s Perspective* di George Gopen. Una serie di brevi articoli sulla scrittura sono offerti da George Gopen e sono disponibili su [https://www.georgegopen.com/litigation-articles.html](https://www.georgegopen.com/litigation-articles.html). 


## Informazioni sull'Ambiente di Sviluppo {.unnumbered}

```{r}
sessionInfo()
```

## Bibliografia {.unnumbered}
