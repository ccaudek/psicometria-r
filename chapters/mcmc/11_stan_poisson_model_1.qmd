# Modello di Poisson (1) {#sec-mcmc-poisson-1}

::: callout-note
## In questo capitolo imparerai a

- utilizzare Stan per modellare dati di Poisson con una distribuzione a priori Gamma coniugata;
- preparare i dati e configurare un modello in cmdstanr;
- eseguire campionamenti MCMC e analizzare la distribuzione a posteriori;
- visualizzare i campioni e confrontarli con densità teoriche;
- calcolare e interpretare intervalli di credibilità per un parametro stimato.
:::

::: callout-tip
## Prerequisiti

-
:::

::: callout-important
## Preparazione del Notebook

```{r}
here::here("code", "_common.R") |> 
  source()

# Load packages
if (!requireNamespace("pacman")) install.packages("pacman")
pacman::p_load(cmdstanr, posterior)
```
:::

## Introduzione

Nel @sec-bayes-inference-gamma-poisson, abbiamo analizzato un problema di inferenza bayesiana utilizzando il modello gamma-poisson. La distribuzione a posteriori è stata calcolata sia tramite il metodo basato su griglia, sia attraverso la derivazione analitica, sfruttando la proprietà di coniugatezza tra la distribuzione di Poisson (verosimiglianza) e la distribuzione Gamma (priori). In questo capitolo, introduciamo un approccio più generale e flessibile: utilizzeremo **Stan**, un linguaggio per il calcolo probabilistico, per affrontare lo stesso problema.

Stan consente di modellare distribuzioni complesse, eseguire campionamenti MCMC (Markov Chain Monte Carlo) e ottenere stime robuste dei parametri. A differenza dell'approccio analitico, l'uso di Stan è particolarmente utile quando la coniugatezza non è garantita o il modello diventa troppo complesso per una soluzione esatta.

## Modello di Poisson con Stan

Riconsideriamo il problema già discusso nel @sec-bayes-inference-gamma-poisson. I dati a disposizione rappresentano una sequenza di osservazioni di un processo di conteggio, per esempio il numero di eventi (compulsioni, visite o chiamate) registrati in un determinato intervallo di tempo. Le osservazioni sono le seguenti:

```{r}
y <- c(2, 1, 3, 2, 2, 1, 1, 1)
```

Questa serie di dati rappresenta $N = 8$ osservazioni del numero di eventi in otto intervalli di tempo. Il nostro obiettivo è stimare il tasso medio di occorrenza, $\lambda$, utilizzando un approccio bayesiano.

Per modellare il processo, assumiamo che le osservazioni seguano una distribuzione di Poisson con parametro $\lambda$, il tasso medio di occorrenza per unità di tempo. La distribuzione di Poisson è definita come:

$$
P(y_i | \lambda) = \frac{\lambda^{y_i} e^{-\lambda}}{y_i!}, \quad y_i \in \mathbb{N}, \ \lambda > 0
$$

A priori, assumiamo che il parametro $\lambda$ segua una distribuzione Gamma, scelta per la sua coniugatezza rispetto alla Poisson. La distribuzione Gamma è definita da due parametri, $\alpha_{\text{prior}}$ e $\beta_{\text{prior}}$, che modellano rispettivamente il tasso medio e la dispersione della distribuzione:

$$
p(\lambda) = \frac{\beta_{\text{prior}}^{\alpha_{\text{prior}}}}{\Gamma(\alpha_{\text{prior}})} \lambda^{\alpha_{\text{prior}} - 1} e^{-\beta_{\text{prior}} \lambda}, \quad \lambda > 0
$$

Per il nostro modello, scegliamo:

- $\alpha_{\text{prior}} = 9$: rappresenta la "forza" della nostra conoscenza a priori.
- $\beta_{\text{prior}} = 2$: rappresenta il livello di concentrazione dei valori attesi attorno a un tasso medio.

### Specifica del Modello in Stan

In Stan, definiamo il modello con una sezione di dati, una sezione per i parametri, e una per il modello stesso:

```
data {
  int<lower=0> N; // numero di osservazioni
  array[N] int<lower=0> y; // dati osservati
  real<lower=0> alpha_prior; // parametro alpha della priori Gamma
  real<lower=0> beta_prior; // parametro beta della priori Gamma
}
parameters {
  real<lower=0> lambda; // parametro di interesse
}
model {
  // Priori
  lambda ~ gamma(alpha_prior, beta_prior);
  
  // Verosimiglianza
  y ~ poisson(lambda);
}
generated quantities {
  real alpha_post = alpha_prior + sum(y);
  real beta_post = beta_prior + N;
}
```

### Creazione del Modello in R

Per iniziare, utilizziamo `cmdstanr` per compilare il modello Stan. Il file `.stan` è salvato nella directory del progetto.

```{r}
stan_file <- here::here("stan", "gamma_poisson_mcmc.stan")
mod <- cmdstan_model(stan_file)
```

A questo punto, il modello è pronto per l'esecuzione con i dati preparati, che includono il numero di osservazioni $N$, i dati stessi $y$, e i parametri della distribuzione a priori.

Sistemiamo i dati nel formato richiesto da Stan.

```{r}
# Preparazione dei dati in R
N <- length(y)
alpha_prior <- 9
beta_prior <- 2

# Preparazione dei dati per Stan
stan_data <- list(N = N, y = y, alpha_prior = alpha_prior, beta_prior = beta_prior)

# Stampa del contenuto di stan_data
print(stan_data)
```

#### Campionamento MCMC

Eseguiamo il campionamento.

```{r}
#| message: false
#| warning: false
#| 
fit <- mod$sample(
  data = stan_data,
  seed = 123,
  chains = 4,
  parallel_chains = 4,
  iter_sampling = 3000, 
  iter_warmup = 2000,
  # adapt_delta = 0.99,
  show_messages = FALSE
)
```

#### Distribuzione a Posteriori

Estraiamo un campione casuale dalla distribuzione a posteriori di `lambda`.

```{r}
lambda_samples <- fit$draws(variables = "lambda", format = "array")
```

Calcoliamo i parametri della Gamma a posteriori teorica.

```{r}
alpha_post <- alpha_prior + sum(y)
beta_post <- beta_prior + N
```

Creiamo un istogramma con i campioni della distribuzione a posteriori di $\lambda$ e sovrapposta la densità teorica della distribuzione a posteriori.

```{r}
lambda_samples <- as.vector(lambda_samples)

# Create a dataframe with lambda_samples
lambda_samples_df <- data.frame(lambda_samples = lambda_samples)

# Generate the plot
ggplot(lambda_samples_df, aes(x = lambda_samples)) +
  geom_histogram(aes(y = after_stat(density)), bins = 50, fill = "blue", alpha = 0.7) +
  stat_function(
    fun = function(x) dgamma(x, shape = alpha_post, rate = beta_post),
    color = "red",
    linewidth = 1.2
  ) +
  ggtitle("Distribuzione a posteriori di lambda") +
  xlab("lambda") +
  ylab("Densità") +
  annotate(
    "text",
    x = max(lambda_samples) * 0.95,
    y = max(dgamma(lambda_samples, shape = alpha_post, rate = beta_post)) * 0.95,
    label = paste0("alpha_post = ", round(alpha_post, 2), "\n",
                   "beta_post = ", round(beta_post, 2)),
    hjust = 1,
    vjust = 1,
    size = 5,
    color = "black"
  ) 
```

Otteniamo un sommario della distribuzione a posteriori dei parametri del modello.

```{r}
fit$summary()
```

Generiamo l'intervallo di credibilità al 94% per la distribuzione a posteriori del parametro `lambda`.

```{r}
# Calcolo dell'intervallo di credibilità al 94%
credibility_interval <- quantile(lambda_samples, probs = c(0.03, 0.97))

# Visualizzazione dell'intervallo
print(credibility_interval)
```

In sintesi, analizzando i dati disponibili e utilizzando una distribuzione a priori Gamma(9, 2), possiamo affermare con un grado di certezza soggettivo del 94% che il tasso stimato di occorrenza dell'evento considerato sia di 2.2 compulsioni all'ora, con un intervallo di credibilità compreso tra 1.4 e 3.1.

## Informazioni sull'Ambiente di Sviluppo {.unnumbered}

```{r}
sessionInfo()
```

