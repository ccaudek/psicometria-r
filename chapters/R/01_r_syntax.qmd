---
execute:
  freeze: auto
---

# Introduzione a R e RStudio {#sec-r}

::: callout-note  
## In questo capitolo imparerai a:  

- installare R e RStudio;
- creare e gestire progetti in RStudio;
- manipolare oggetti e vettori in R;
- utilizzare funzioni e lavorare con dati mancanti;
- estrarre e gestire sottoinsiemi di dati.
:::  

::: callout-tip
## Prerequisiti

- Leggere [An Introduction to R](https://intro2r.com/).
- Leggere [R for Data Science (2e)](https://r4ds.hadley.nz/).
:::

::: callout-important
## Preparazione del Notebook

```{r}
here::here("code", "_common.R") |> 
  source()

# Load packages
if (!requireNamespace("pacman")) install.packages("pacman")
pacman::p_load(tidyr)
```
:::

## Introduzione

Negli ultimi anni, la **crisi della replicabilità** ha messo in luce problemi significativi nella scienza: molte analisi non possono essere riprodotte, minando la fiducia nei risultati pubblicati [@nosek2022replicability]. Per affrontare questa sfida, è fondamentale adottare strumenti che promuovano **trasparenza**, **riproducibilità** e **rigore metodologico**. R si distingue come uno strumento ideale per soddisfare queste esigenze, grazie a tre punti di forza principali:

1. **Scripting e documentazione trasparente.** 
  Ogni analisi in R viene realizzata attraverso script che documentano in modo esplicito tutti i passaggi. Questo approccio offre numerosi vantaggi:

    - Gli script possono essere **salvati**, **condivisi** e **rivisti**, garantendo che ogni aspetto del processo analitico sia accessibile e riproducibile.
    - La possibilità di eseguire gli stessi script con nuovi dati consente di verificare i risultati originali o applicare l’analisi in contesti differenti.

2. **Flessibilità e personalizzazione.** 
  R fornisce un ambiente altamente flessibile, che permette di:

    - **Adattare i flussi di lavoro** a problemi specifici o a nuovi set di dati.
    - Sfruttare una vasta libreria di pacchetti che coprono metodi statistici avanzati, visualizzazione dei dati e machine learning.
    - Sviluppare funzioni personalizzate per rispondere a esigenze analitiche uniche.

3. **Integrazione con strumenti di reporting.** 
  R si integra perfettamente con strumenti come **R Markdown** e **Quarto**, che consentono di combinare analisi, codice e risultati in un unico documento dinamico. Questo approccio offre:

    - La possibilità di creare report automatici, aggiornabili semplicemente modificando i dati sottostanti.
    - Un formato unificato che include testo descrittivo, codice e output (grafici, tabelle, statistiche), facilitando la comunicazione scientifica.

A differenza di software con interfacce grafiche (GUI), che spesso introducono **errori nascosti** e rendono difficile documentare il flusso di lavoro, R favorisce un approccio basato su **codice esplicito**. Questo approccio:

- Elimina ambiguità, poiché ogni operazione è descritta chiaramente nello script.
- Incrementa la verificabilità, consentendo a terzi di esaminare ogni passaggio dell’analisi.

Utilizzare R non significa solo apprendere uno strumento tecnico, ma adottare un approccio scientifico moderno e replicabile. Lavorare in R risponde alle richieste di una ricerca affidabile e contribuisce a contrastare la crisi della replicabilità, favorendo analisi **trasparenti**, **rigorose** e **comunicabili**.

## Installare R e RStudio

1. **Scarica e installa R**  
   Vai al sito ufficiale di CRAN (https://cran.r-project.org/), scegli la versione per il tuo sistema operativo (Windows, Mac o Linux) e segui le istruzioni di installazione.

2. **Scarica e installa RStudio**  
   Dopo aver installato R, scarica RStudio dal sito ufficiale (https://posit.co/download/rstudio-desktop/). Scegli la versione gratuita "RStudio Desktop" e segui le istruzioni per il tuo sistema operativo.

Una spiegazione dettagliata del processo di installazione di R e RStudio è disponibile in @okoye2024introduction.

## Panoramica sull'interfaccia di RStudio

RStudio rende l’uso di R più intuitivo grazie alla sua interfaccia divisa in quattro pannelli principali:

- **Pannello degli script**: Qui puoi scrivere e modificare i tuoi script, cioè sequenze di comandi salvabili per analisi ripetibili e organizzate.
- **Console**: Esegue i comandi scritti direttamente o lanciati dagli script, mostrando risultati, messaggi e errori.
- **Pannello dell’ambiente**: Mostra i dataset, le variabili e gli oggetti caricati nella sessione di lavoro, permettendoti di gestire facilmente i dati.
- **Pannello grafici/aiuto/file**: Visualizza grafici, fornisce accesso alla documentazione di R e consente di navigare tra file e cartelle sul tuo sistema.

## Creare un Nuovo Progetto in RStudio

**Avviare un nuovo progetto**  
Dal menu di RStudio, seleziona **File > New Project...** per creare un nuovo progetto. I progetti in RStudio sono uno strumento efficace per organizzare il lavoro relativo a una specifica analisi o domanda di ricerca. All'interno di un progetto puoi raccogliere script, file di dati e output, mantenendo tutto ben strutturato.

**Scegliere la posizione del progetto**  
Puoi creare una nuova directory dedicata al progetto oppure associare il progetto a una directory esistente. Organizzare i progetti in cartelle dedicate aiuta a mantenere i file in ordine e a utilizzare percorsi relativi, rendendo il tuo lavoro più facile da condividere con collaboratori e più portabile tra diversi sistemi. 

Questa organizzazione è particolarmente utile per evitare confusione e assicurarsi che tutti i file necessari siano facilmente accessibili e collegati al progetto corretto.

## Concetti di Base nella Programmazione in R

Iniziare a usare R, soprattutto per chi si avvicina per la prima volta a questo linguaggio nel contesto della psicologia, significa comprendere i concetti fondamentali che ne costituiscono la base. Questo capitolo introduce i principi essenziali della programmazione in R, tra cui:

- La comprensione della **sintassi di R**.
- La familiarizzazione con i principali **tipi di dati** e **strutture**. 
- L’acquisizione delle **operazioni di base**.

Questi concetti sono fondamentali per manipolare efficacemente i dati e condurre analisi statistiche, rappresentando il punto di partenza per sfruttare al meglio le potenzialità di R.

## Oggetti in R

In R, tutto è un oggetto: dai numeri o stringhe di testo semplici, fino a strutture più complesse come grafici, riassunti di analisi statistiche o script che eseguono compiti specifici. Creare e assegnare valori agli oggetti è fondamentale per lavorare in R.

### Creare oggetti

Per creare un oggetto, basta assegnargli un nome e un valore usando l’operatore di assegnazione `<-`:

```{r}
my_obj <- 48
```

In questo esempio, abbiamo creato un oggetto chiamato `my_obj` e gli abbiamo assegnato il valore 48. Anche l'operatore `=` può essere usato, ma è considerato una cattiva pratica.

Per visualizzare il valore di un oggetto, basta scriverne il nome:

```{r}
my_obj
```

Gli oggetti creati vengono memorizzati nell'ambiente di lavoro. In RStudio, puoi visualizzarli nella scheda **Environment** e ottenere dettagli come tipo, lunghezza e valore.

È possibile assegnare a un oggetto anche una stringa di testo, racchiudendola tra virgolette:

```{r}
my_obj2 <- "R è fantastico"
my_obj2
```

Se dimentichi le virgolette, R mostrerà un errore.

Per modificare il valore di un oggetto esistente, basta riassegnarlo:

```{r}
my_obj2 <- 1024
```

Ora il tipo di `my_obj2` è cambiato da carattere a numerico. È anche possibile usare oggetti per crearne di nuovi:

```{r}
my_obj3 <- my_obj + my_obj2
my_obj3
```

Se provi a sommare oggetti di tipo diverso, R restituirà un errore:

```
char_obj <- "ciao"
char_obj2 <- "mondo"
char_obj3 <- char_obj + char_obj2
#> Error in char_obj + char_obj2 : non-numeric argument to binary operator
```

Quando incontri errori come questo, chiedi a AI la spiegazione del messaggio, per esempio: "non-numeric argument to binary operator error + r". Un errore comune è anche:

```
my_obj <- 48
my_obj4 <- my_obj + no_obj
#> Error: object 'no_obj' not found
```

R segnala che `no_obj` non è stato definito e, di conseguenza, l’oggetto `my_obj4` non è stato creato.

### Nomi degli oggetti

Dare un nome agli oggetti può sembrare banale, ma è importante scegliere nomi brevi e informativi. Usa un formato coerente, come:

- **Snake case**: `output_summary`
- **Dot case**: `output.summary`
- **Camel case**: `outputSummary`

Evita di iniziare i nomi con numeri (es. `2my_variable`) o caratteri speciali (&, ^, /, ecc.). Inoltre, non usare parole riservate (es. `TRUE`, `NA`) o nomi di funzioni già esistenti (es. `data`).

Esempio da evitare:

```
data <- read.table("mydatafile", header = TRUE) # `data` è già una funzione!
```

## Commenti

I commenti nel linguaggio di programmazione (in questo caso R) sono parti del codice che il linguaggio stesso ignora completamente, ovvero non vengono eseguite. La loro funzione principale è aiutare il programmatore a chiarire cosa fanno le diverse parti del codice, rendendolo più comprensibile sia a sé stessi sia ad altri. In R, come si può osservare nell'esempio sopra, i commenti iniziano con il simbolo `#`. Tutto ciò che segue il simbolo `#` sulla stessa riga viene ignorato durante l'esecuzione del codice. 

È una buona pratica commentare frequentemente il codice, soprattutto nei punti in cui le decisioni prese non risultano immediatamente evidenti. I commenti dovrebbero spiegare **perché** si sta facendo qualcosa, piuttosto che **come** viene fatto: il "come" è già descritto dal codice stesso. 

Ad esempio, invece di scrivere un commento come:

```r
# Assegno 42 alla variabile x
x <- 42
```

è più utile spiegare il contesto o la motivazione:

```r
# Valore iniziale scelto per semplificare i calcoli successivi
x <- 42
```

Questo approccio aiuta chiunque legga il codice (incluso il futuro te stesso!) a comprendere le intenzioni alla base delle scelte fatte, riducendo il tempo necessario per interpretarlo o modificarlo. Un codice ben commentato è quindi non solo più comprensibile, ma anche più facile da mantenere e riutilizzare.

## Usare le funzioni in R 

Fino ad ora abbiamo creato oggetti semplici assegnando loro direttamente un valore. Con l'aumento dell'esperienza in R, potresti voler creare oggetti più complessi. Per aiutarti, R offre numerose funzioni già disponibili nella sua installazione di base, e altre possono essere aggiunte installando pacchetti. Una funzione è un insieme di istruzioni che eseguono un compito specifico. Inoltre, è possibile creare funzioni personalizzate.

### La funzione `c()` per creare vettori

La prima funzione utile da imparare è `c()`, che serve a concatenare valori in un *vettore*. Ad esempio:

```{r}
my_vec <- c(2, 3, 1, 6, 4, 3, 3, 7)
```

Questo codice crea un oggetto chiamato `my_vec` che contiene una sequenza di numeri. Alcuni concetti fondamentali sulle funzioni in R:

1. **Nome e parentesi**: Le funzioni in R sono sempre seguite da parentesi tonde `()`.
2. **Argomenti**: Gli elementi passati alla funzione (tra le parentesi) ne personalizzano il comportamento e sono separati da virgole.

Per vedere il contenuto del vettore:

```{r}
my_vec
```

### Funzioni per analizzare vettori

Puoi utilizzare altre funzioni per calcolare statistiche sul vettore:

```{r}
mean(my_vec)    # Media
```

```{r}
var(my_vec)     # Varianza
```

```{r}
sd(my_vec)      # Deviazione standard
```

```{r}
length(my_vec)  # Numero di elementi
```

Puoi anche salvare i risultati in nuovi oggetti per riutilizzarli:

```{r}
vec_mean <- mean(my_vec)
vec_mean
```

### Creare sequenze regolari

Per creare sequenze di numeri in passi regolari, puoi usare i seguenti comandi.

**Simbolo `:`** per sequenze semplici:

```{r}
my_seq <- 1:10
my_seq
```

**Funzione `seq()`** per maggiore controllo:

```{r}
my_seq2 <- seq(from = 1, to = 5, by = 0.5)
my_seq2
```

### Ripetere valori

Puoi ripetere valori o sequenze con la funzione `rep()`.

Ripetere un valore:
  
```{r}
my_seq3 <- rep(2, times = 10)
my_seq3
```

Ripetere una sequenza:

```{r}
my_seq5 <- rep(1:5, times = 3)
```

Ripetere ogni elemento di una sequenza:

```{r}
my_seq6 <- rep(1:5, each = 3)
my_seq6
```

### Annidare funzioni

È possibile combinare funzioni per creare comandi più complessi, come nell'esempio:

```{r}
my_seq7 <- rep(c(3, 1, 10, 7), each = 3)
my_seq7
```

Per maggiore leggibilità, puoi separare i passaggi:

```{r}
in_vec <- c(3, 1, 10, 7)
my_seq7 <- rep(in_vec, each = 3)
my_seq7
```

Questa pratica facilita la comprensione del codice e lo rende più chiaro.


## Lavorare con i vettori in R 

In R, i vettori sono uno degli elementi fondamentali per manipolare, riassumere e ordinare i dati. Qui trovi una panoramica su come estrarre, sostituire, ordinare, lavorare con dati mancanti e sfruttare la vettorizzazione dei vettori.

### Estrarre elementi da un vettore

Puoi estrarre uno o più elementi da un vettore usando le parentesi quadre `[ ]`.

**Per posizione**: Specifica la posizione degli elementi.  

```{r}
my_vec <- c(2, 3, 1, 6, 4, 3, 3, 7)
my_vec[3]  # Terzo elemento
```

```{r}
my_vec[c(1, 5, 6)]  # Elementi 1°, 5° e 6°
```

```{r}
my_vec[3:8]  # Da 3° a 8°
```

**Con condizioni logiche**: Usa espressioni logiche per selezionare elementi.

```{r}
my_vec[my_vec > 4]  # Elementi > 4
```

```{r}
my_vec[my_vec <= 4]  # Elementi ≤ 4
```

```{r}
my_vec[my_vec != 4]  # Elementi diversi da 4
```

**Operatori logici**: Combina condizioni con `&` (AND) e `|` (OR).  
   
```{r}
my_vec[my_vec > 2 & my_vec < 6]  # Tra 2 e 6
```

### Sostituire elementi in un vettore

Puoi modificare i valori di un vettore usando `[ ]` e l'operatore `<-`.

**Un singolo elemento**:  

```{r}
my_vec[4] <- 500  # Cambia il 4° elemento
my_vec
```

**Più elementi**: 

```{r}
my_vec[c(6, 7)] <- 100  # Cambia il 6° e 7° elemento
my_vec
```

**Con condizioni logiche**:  

```{r}
my_vec[my_vec <= 4] <- 1000  # Cambia valori ≤ 4
my_vec
```

### Ordinare un vettore

**Dal più piccolo al più grande**:  

```{r}
vec_sort <- sort(my_vec)
vec_sort
```

**Dal più grande al più piccolo**:  

```{r}
vec_sort2 <- sort(my_vec, decreasing = TRUE)
vec_sort2
```

**Ordinare un vettore in base a un altro**: 

```{r}
height <- c(180, 155, 160, 167, 181)
p.names <- c("Joanna", "Charlotte", "Helen", "Karen", "Amy")
height_ord <- order(height)
names_ord <- p.names[height_ord]
names_ord
```

## Operazioni Vettoriali e Vettorizzazione in R

La vettorializzazione è una delle caratteristiche più potenti di R, che consente di applicare operazioni o funzioni direttamente a tutti gli elementi di un vettore in modo simultaneo, senza dover ricorrere a cicli espliciti. Questo approccio rende il codice più conciso, leggibile ed efficiente, sfruttando al meglio le capacità intrinseche del linguaggio.

### Operazioni Aritmetiche su Vettori

Le operazioni algebriche in R, come addizione, sottrazione, moltiplicazione e divisione, sono vettorizzate. Questo significa che ogni operazione viene applicata "elemento per elemento" al vettore.

Consideriamo ad esempio il seguente vettore:

```{r}
my_vec <- c(3, 5, 7, 1, 9, 20)
```

Se vogliamo moltiplicare ciascun elemento di `my_vec` per 5, possiamo scrivere:

```{r}
my_vec * 5
```

Analogamente, possiamo effettuare altre operazioni algebriche, come divisione o elevamento a potenza:

```{r}
my_vec / 2
```

```{r}
my_vec^2
```

Queste operazioni vengono applicate automaticamente a ciascun elemento del vettore, senza dover iterare su di essi.

### Operazioni Elemento per Elemento tra Due Vettori

La vettorializzazione consente anche di eseguire operazioni tra due vettori, applicandole elemento per elemento. Supponiamo di avere un secondo vettore:

```{r}
my_vec2 <- c(17, 15, 13, 19, 11, 0)
```

Se vogliamo sommare i due vettori, possiamo scrivere:

```{r}
my_vec + my_vec2
```

In questo caso, il primo elemento di `my_vec` viene sommato al primo elemento di `my_vec2`, il secondo elemento al secondo, e così via.

### Attenzione al Riciclo dei Vettori

Se i due vettori hanno lunghezze diverse, R applicherà il meccanismo di **riciclo**: gli elementi del vettore più corto verranno ripetuti ciclicamente per abbinarsi alla lunghezza del vettore più lungo. Questo comportamento, sebbene utile, richiede attenzione per evitare risultati inattesi.

Ad esempio:

```{r}
short_vec <- c(1, 2)
my_vec + short_vec
```

In questo caso, gli elementi di `short_vec` vengono riciclati per abbinarsi alla lunghezza di `my_vec`. Il risultato è:

```
(3+1, 5+2, 7+1, 1+2, 9+1, 20+2)
```

### Applicazione di Funzioni su Vettori

La vettorializzazione non si limita alle operazioni algebriche, ma si estende anche all'uso di funzioni. Supponiamo di voler calcolare il logaritmo naturale di ciascun elemento di un vettore:

```{r}
log(my_vec)
```

La funzione `log()` viene applicata automaticamente a ogni elemento del vettore. Analogamente, possiamo utilizzare altre funzioni predefinite di R, come:

```{r}
sqrt(my_vec)  # Calcola la radice quadrata di ciascun elemento
exp(my_vec)   # Eleva e alla potenza specificata da ciascun elemento
```

In conclusione, la vettorializzazione in R rappresenta un approccio elegante ed efficiente per gestire calcoli su vettori. Che si tratti di operazioni algebriche, operazioni tra vettori o applicazione di funzioni, la possibilità di evitare cicli espliciti migliora la leggibilità e la velocità del codice. Tuttavia, è importante prestare attenzione al riciclo dei vettori per evitare errori non intenzionali.

## Gestire dati mancanti (NA)

R rappresenta i dati mancanti con `NA`. La gestione dei dati mancanti dipende dalla funzione utilizzata.

**Calcolo con dati mancanti**:  

```{r}
temp <- c(7.2, NA, 7.1, 6.9, 6.5, 5.8, 5.8, 5.5, NA, 5.5)
mean(temp)  # Restituisce NA
```

```{r}
mean(temp, na.rm = TRUE)  # Ignora i valori mancanti
```

**Nota**: `na.rm = TRUE` è un argomento comune per ignorare i `NA`, ma non tutte le funzioni lo supportano. Consulta la documentazione della funzione per verificare come gestisce i dati mancanti.

In conclusione, manipolare vettori è un’abilità essenziale in R. Dalla selezione e modifica degli elementi all’ordinamento e gestione di dati mancanti, queste tecniche sono alla base dell’analisi dei dati in R.

## I dati in R 

In R, i dati possono essere rappresentati in diversi tipi e strutture. Comprendere come gestirli è fondamentale per manipolare, analizzare e riassumere i dataset più complessi.

### Tipi di dati in R

R supporta diversi tipi di dati:

1. **Numeric**: Numeri decimali (es. `2.5`).
2. **Integer**: Numeri interi (es. `3`).
3. **Logical**: Valori booleani (`TRUE` o `FALSE`) e `NA` per dati mancanti.
4. **Character**: Stringhe di testo (es. `"hello"`).
5. **Factor**: Variabili categoriche (es. livelli come `"low"`, `"medium"`, `"high"`).

Puoi verificare il tipo di un oggetto con `class()` e controllare se appartiene a un tipo specifico con funzioni come `is.numeric()`. È anche possibile convertire un tipo in un altro con funzioni come `as.character()`.

### Strutture di dati in R

**Vettori**: Contengono dati dello stesso tipo (es. numeri, stringhe o logici).  

```{r}
my_vec <- c(1, 2, 3)
my_vec
```

**Matrici e array**: Strutture bidimensionali (matrici) o multidimensionali (array) con dati dello stesso tipo.  

Creare una matrice:

```{r}
my_mat <- matrix(1:12, nrow = 3, byrow = TRUE)
my_mat
```
   
Operazioni utili:
   
- **Trasposizione**: `t(my_mat)`
- **Diagonale**: `diag(my_mat)`
- **Moltiplicazione matriciale**: `mat1 %*% mat2`

**Liste**: Possono contenere elementi di tipi diversi, inclusi vettori, matrici o altre liste.  

```{r}
my_list <- list(
  numbers = c(1, 2), 
  text = "hello", 
  mat = matrix(1:4, nrow = 2)
)
my_list$numbers  # Accedi agli elementi con il nome
```

**Data frame**: Strutture bidimensionali che possono contenere colonne di tipi diversi. Ideale per dataset strutturati.  

Creare un data frame:
   
```{r}
height <- c(180, 155, 160)
weight <- c(65, 50, 52)
names <- c("Joanna", "Charlotte", "Helen")

dataf <- data.frame(height = height, weight = weight, names = names)
str(dataf)  # Mostra la struttura del data frame
```

Per convertire le stringhe in fattori durante la creazione:

```{r}
dataf <- data.frame(
  height = height, 
  weight = weight, 
  names = names, 
  stringsAsFactors = TRUE
)

dataf
```

### Operazioni utili sui data frame

- **Verificare dimensioni**: `dim(dataf)`
- **Visualizzare struttura**: `str(dataf)`
- **Accedere a colonne**: `dataf$height`

## Operazioni di Base in R

### Operazioni Aritmetiche  

R supporta le classiche operazioni aritmetiche come somma (`+`), sottrazione (`-`), moltiplicazione (`*`), divisione (`/`) ed esponenziazione (`^`).

```{r}
# Somma
3 + 2
# Moltiplicazione
3 * 2
```

### Operazioni Logiche  

Le operazioni logiche in R includono:  

- **&**: "and" logico  
- **|**: "or" logico  
- **!**: "not" logico  
- **>**: maggiore di  
- **<**: minore di  
- **==**: uguale a  
- **!=**: diverso da  

Esempi:  

```{r}
# Maggiore di
3 > 2
# Uguale a
3 == 2
```

## Estrazione di Sottoinsiemi di Oggetti in R

In R esistono tre operatori principali per estrarre sottoinsiemi di oggetti:

1. **Operatore `[ ]`**  
   Questo operatore restituisce sempre un oggetto della stessa classe dell'originale. È utile per selezionare più elementi da un oggetto. È importante chiudere l'estrazione con `]`.  
   
2. **Operatore `[[ ]]`**  
   Questo operatore viene utilizzato per estrarre elementi da liste o data frame. A differenza di `[ ]`, permette di estrarre un solo elemento alla volta e la classe dell'oggetto restituito non sarà necessariamente una lista o un data frame. L'estrazione va chiusa con `]]`.  
   
3. **Operatore `$`**  
   Come visto in precedenza, questo operatore serve per estrarre elementi da una lista o un data frame utilizzando il loro nome letterale. Il comportamento semantico è simile a quello di `[[ ]]`.


### Esempi Pratici

Selezione di colonne in un data frame:

```{r}
iris[, 1:3] |> head()
```

Restituisce le prime tre colonne del dataset `iris`.

Selezione di colonne specifiche per nome:

```{r}
iris[, c('Sepal.Length', 'Petal.Length')] |> 
  head()  # Nomi delle colonne
```

Selezione di una singola colonna:

```{r}
iris[, 'Petal.Length'] |> head()
```

Selezione di righe specifiche:

```{r}
iris[c(1, 3), ]
```

Restituisce le righe 1 e 3.

Filtraggio logico di righe:

```{r}
iris[iris$Species == 'versicolor', ] |> head()
```

Restituisce le righe con `Species` uguale a "versicolor". Numero di righe e colonne del sottoinsieme:

```{r}
dim(iris[iris$Species == 'versicolor', ])
```

### Filtraggio Avanzato con Operatori Logici

Gli operatori logici `&` (AND), `|` (OR) e `!` (NOT) permettono un filtraggio più sofisticato.

Esempio: Filtrare le osservazioni di specie "versicolor" con lunghezza del sepalo non superiore a 5.0:

```{r}
iris[(iris$Species == 'versicolor') & (iris$Sepal.Length <= 5.0), ]
```

Numero di osservazioni trovate:

```{r}
dim(iris[(iris$Species == 'versicolor') & (iris$Sepal.Length <= 5.0), ])
```

## Riflessioni Conclusive

R non è soltanto un linguaggio di programmazione per la statistica, ma rappresenta una filosofia che si fonda su tre principi chiave: **apertura**, **collaborazione** e **avanzamento della conoscenza scientifica**. 

Per chi si avvicina a R, sia nel campo della comunicazione sia in altri ambiti, cogliere questa filosofia è essenziale per apprezzarne appieno il valore. R promuove non solo competenze tecniche, ma anche un impegno verso pratiche di **ricerca trasparente e riproducibile**, che costituiscono un pilastro fondamentale per una scienza rigorosa e affidabile.

**Open Source**  
R è un software open source, liberamente accessibile a tutti. Questo significa che chiunque può visualizzarne, modificarne e distribuirne il codice sorgente, promuovendo un ambiente trasparente e collaborativo. Essendo gratuito, R garantisce accessibilità a ricercatori di tutto il mondo, indipendentemente dal budget o dal supporto istituzionale. Inoltre, grazie alla sua natura aperta, R beneficia del contributo collettivo di una comunità globale eterogenea.

**Contributi della Comunità**  
La comunità di R è uno dei suoi punti di forza principali. Statistici, ricercatori e data scientist di diverse discipline arricchiscono continuamente R sviluppando pacchetti: raccolte di funzioni, dati e codice che ampliano le sue funzionalità. Questa collaborazione ha portato alla creazione di migliaia di pacchetti che coprono tecniche statistiche, metodi grafici e strumenti per la manipolazione dei dati, rendendo R uno strumento sempre più versatile e adatto a un’ampia gamma di esigenze di ricerca.

**Ricerca Riproducibile**  
La ricerca riproducibile consiste nel condurre studi in modo tale che altri possano replicarne i risultati utilizzando gli stessi dati e seguendo la stessa metodologia. Questo approccio è cruciale per la validazione delle scoperte scientifiche, permettendo la verifica dei risultati e la costruzione di nuove conoscenze su basi solide.

R facilita la ricerca riproducibile grazie a:  

- Un ecosistema completo di pacchetti per l'analisi dei dati e la generazione di report dinamici.  
- Strumenti come R Markdown e Quarto, che permettono di integrare testo descrittivo e codice R in un unico documento. Questa integrazione consente di documentare ogni fase del processo di ricerca—dalla pulizia dei dati all’analisi e alla presentazione dei risultati—garantendo trasparenza e replicabilità.  

In conclusione, comprendere la filosofia open source di R e il suo ruolo nella promozione della ricerca riproducibile fornisce un quadro chiaro del motivo per cui R è diventato uno strumento essenziale per ricercatori e statistici di diverse discipline. Per chi opera in psicologia, sfruttare le potenzialità di R significa produrre risultati di ricerca più trasparenti, replicabili e credibili, contribuendo alla robustezza e affidabilità della conoscenza scientifica nel settore.

## Informazioni sull'Ambiente di Sviluppo {.unnumbered}

```{r}
sessionInfo()
```

## Bibliografia {.unnumbered}
