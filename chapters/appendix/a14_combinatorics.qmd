# Calcolo combinatorio {#sec-apx-combinatorics}

Il **calcolo combinatorio** si occupa di determinare il numero di modi in cui è possibile combinare, ordinare o disporre elementi di uno o più insiemi, seguendo regole predefinite. Molti problemi di probabilità richiedono l'applicazione di tecniche combinatorie per calcolare le probabilità di eventi complessi. In questo capitolo, esploreremo le nozioni fondamentali del calcolo combinatorio, mettendo in relazione i suoi concetti con i vari metodi di **campionamento dall'urna**.

## Introduzione al calcolo combinatorio con R

Verranno introdotti i principi fondamentali del calcolo combinatorio, come il **principio del prodotto** e il **principio della somma**, insieme al modello dell'urna, che rappresenta un approccio classico per risolvere problemi di probabilità. Saranno inoltre esaminate le nozioni di **permutazioni**, **disposizioni** e **combinazioni**, collegandole ai diversi tipi di campionamento.

```{r}
# Caricamento delle librerie necessarie
suppressPackageStartupMessages({
  library(gtools)
library(combinat)
})
```

---

### Principio del prodotto

Il principio del prodotto viene applicato quando un'operazione può essere suddivisa in più fasi indipendenti. Se al passo $i$ ci sono $n_i$ possibilità, il numero totale di combinazioni è il prodotto di tutte le possibilità:

$$
n_{\text{tot}} = n_1 \cdot n_2 \cdot \dots \cdot n_k
$$

::: {#exm-}
Ho a disposizione 2 paia di scarpe, 3 paia di pantaloni e 5 magliette. In quanti modi posso vestirmi?

```{r}
scarpe <- 2
pantaloni <- 3
magliette <- 5
modi_totali <- scarpe * pantaloni * magliette
modi_totali
```
:::

::: {#exm-}
In Minnesota, le targhe automobilistiche consistono in tre lettere (da A a Z) seguite da tre numeri (da 0 a 9). Qual è la proporzione di targhe che iniziano con "GZN"?

```{r}
n_targhe <- 26^3 * 10^3
n_gzn <- 10^3
proporzione <- n_gzn / n_targhe
proporzione
```
:::

---

### Principio della somma

Il principio della somma si applica quando un insieme può essere suddiviso in sottoinsiemi disgiunti. Il numero totale di elementi è la somma degli elementi dei sottoinsiemi.

::: {#exm-}
Quanti insiemi di due palline, ciascuna estratta da urne differenti, si possono formare?

```{r}
AB <- 5 * 6
AC <- 5 * 3
AD <- 5 * 2
BC <- 6 * 3
BD <- 6 * 2
CD <- 3 * 2

totale_insiemi <- AB + AC + AD + BC + BD + CD
totale_insiemi
```
:::

---

### Il modello dell'urna e i metodi di campionamento

I problemi combinatori spesso si riducono a modelli di **estrazione di palline da urne**, con quattro principali varianti:

1. **Con ripetizione e ordine**: ogni estrazione rimette la pallina nell'urna (campionamento Bernoulliano).
2. **Senza ripetizione e con ordine**: ogni estrazione rimuove la pallina.
3. **Con ripetizione e senza ordine**: si considerano le combinazioni, ignorando l'ordine.
4. **Senza ripetizione e senza ordine**: si contano le combinazioni senza rimettere la pallina.

::: {#exm-}
Campionamenti possibili da un'urna con elementi {a, b, c}.

```{r}
urna <- c("a", "b", "c")
```

Con ripetizione e ordine:

```{r}
campionamento1 <- expand.grid(urna, urna)
print(campionamento1)
```

Senza ripetizione e con ordine:

```{r}
campionamento2 <- permutations(n = length(urna), r = 2, v = urna)
campionamento2
```

Con ripetizione e senza ordine:

```{r}
campionamento3 <- combinations(
  n = length(urna), r = 2, v = urna, repeats.allowed = TRUE
)
campionamento3
```

Senza ripetizione e senza ordine:

```{r}
campionamento4 <- combinations(n = length(urna), r = 2, v = urna)
campionamento4
```
:::

---

### Permutazioni semplici

Le **permutazioni** rappresentano tutte le disposizioni di $n$ elementi distinti. Il loro numero è dato da:

$$
P_n = n!
$$

::: {#exm-}
Permutazioni dell'insieme $\{a, b, c\}$.

```{r}
A <- c("a", "b", "c")
perm <- permutations(n = length(A), r = length(A), v = A)
print(perm)
nrow(perm)
```
:::

---

### Disposizioni semplici

Le **disposizioni** sono sequenze ordinate di $k$ elementi scelti da un insieme di $n$ elementi distinti:

$$
D_{n,k} = \frac{n!}{(n-k)!}
$$

::: {#exm-}
Disposizioni di 2 elementi da $\{a, b, c\}$.

```{r}
disp <- permutations(n = 3, r = 2, v = A)
print(disp)
nrow(disp)
```
:::

Le disposizioni semplici effettivamente corrispondono a un campionamento senza ripetizione e con ordine. Qui l'ordine degli elementi estratti è importante, e ogni elemento può essere estratto solo una volta.

---

### Combinazioni semplici

Le **combinazioni** rappresentano i modi di scegliere $k$ elementi da un insieme di $n$ elementi senza considerare l'ordine:

$$
C_{n,k} = \binom{n}{k} = \frac{n!}{k!(n-k)!}
$$

::: {#exm-}
Combinazioni di 2 elementi da $\{a, b, c\}$.

```{r}
comb <- combinations(n = 3, r = 2, v = A)
print(comb)
nrow(comb)
```
:::

Le combinazioni semplici corrispondono a un campionamento senza ripetizione e senza ordine. In questo caso, l'ordine degli elementi estratti non è rilevante, e ogni elemento può essere estratto solo una volta.

---

Questo capitolo ha illustrato i legami tra i metodi del calcolo combinatorio e le diverse modalità di campionamento, mostrando come implementare questi concetti in **R** per affrontare problemi pratici di probabilità e statistica.
